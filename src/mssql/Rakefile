# frozen-string-literal: true

require 'bundler/setup'
require 'yaml'

Rake.add_rakelib '../schematic/tasks/shared/'
Rake.add_rakelib '../schematic/tasks/mssql/'

def set_env_vars(db)
  ENV['DB_HOST'] = db['DB_HOST']
  ENV['DB_NAME'] = db['DB_NAME']
  ENV['DATABASE_URL'] = db['DATABASE_URL']
  ENV['DB_TYPE'] = db['DB_TYPE']
  ENV['DB_ADAPTER'] = db['DB_ADAPTER']
end

def deploy_tasks(app = nil)
  Rake::Task['db:migrate'].reenable
  Rake::Task['db:migrate'].invoke(nil, app)

  ['vw', 'fn', 'sp', 'seed', 'job'].each do |task|
    Rake::Task["#{task}:deploy"].reenable
    Rake::Task["#{task}:deploy"].invoke
  end
end

desc "Run deployment on all target DB"
task :deploy_all, [:app] => 'app:env' do |t, args|
  databases = YAML.safe_load(File.open("databases.yaml"), aliases: true)

  databases['databases'].each do |db|
    set_env_vars(db)

    puts "\n\nDeployment started on: #{ENV['DB_HOST']}\\#{ENV['DB_NAME']}\n"
    puts "-" * 80 + "\n"

    ENV['APP'] = args[:app] if args[:app]
    deploy_tasks(args[:app])

    puts "\nDeployment completed on: #{ENV['DB_HOST']}\\#{ENV['DB_NAME']}\n\n"
  end
end

desc "Run deployment on individual target DB"
task :deploy, [:app] => 'app:env' do |t, args|
  puts "\n\nDeployment started on: #{ENV['DB_HOST']}\\#{ENV['DB_NAME']}\n"
  puts "-" * 80 + "\n"
  
  ENV['APP'] = args[:app] if args[:app]
  deploy_tasks(args[:app])

  puts "\nDeployment completed on: #{ENV['DB_HOST']}\\#{ENV['DB_NAME']}\n\n"
end
